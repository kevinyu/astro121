### Using DFEC
import DFEC

# SRS Function Generator
DFEC.set_srs
 freq: Set LO frequency
 vpp: Set amplitude in volts
 off: Set DC offset
 pha: Set phase offset


# Sampling
DFEC.sampler
 nSamp: number of samples
 freqSamp: sampling frequency in Hz

>>> data = DFEC.sampler(1e3, 1e7)  # acquired data


Numpy has a builtin function called savez which saves arrays into a single file
>>> np.savez("mixer_data.npz", data)  # saves array to file
>>> F = np.load("mixer_data.npz")
>>> F.files
['arr_0']
>>> data = F["arr_0"]  # get data back out of npz


# Using ROACH
ssh root@roach

cd /boffiles
./adc_snaps_2014_{watever the latest is}.bof &  # Runs bof in background programming the FPGA
# keep this running, and when you are done with data collection, kill the process using PID

cd /proc/{PID}/hw/ioreg
# write a python script that writes a 1 to the trig file, then writes a 0.
echo -ne "\x00\x00\x00\x01" > trig
# When the 0 is written, data will be collected
# the data is around here in binary form
#
# to convert:
ipython
np.fromfile(file, dtype=">i")
# we are big endian so our dtype needs to specify: ">i" instead of just "i"


# Digital down conversion
cd /boffiles
./dig_dwn_conv_2_2014_Feb_25_1332.bof &
cd /proc/{PID}/hw/ioreg
# from here, you needs to put in da coeffs
# there be 18 bits (the lower 18 bits)
# 17 bits after binary point
# i.e. 0.00000...
#
# to write .25 + .125i to the first coefficient
echo -ne "...\x02\x00\x00\00...." > coeff_imag0
echo -ne "...\x01\x00\x00\00...." > coeff_real0
