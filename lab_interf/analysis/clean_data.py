"""
Functions to help clean up data sets
"""
import numpy as np
import re


def check_valid_points(data, log, start_at_timestamp=None):
    """Generate arrays that specify which data-points were taken while telescope
    was homing, as well as which data points were taken while target was
    out of range.

    Takes as arguments
    data: a numpy opened .npz data dict created by radiolab.recordDVM
    log: log file generated by tracker.py during data collection
    outputfile: name of file output

    NOTE THAT IF THE TARGET STARTS OUT OF RANGE, YOU NEED TO SPECIFY THE TIMESTAMP
    AT WHICH THE TARGET WAS IN RANGE AS IT APPEARS IN THE LOG FILE
    """
    DATAPOINT_REGEX = re.compile("Measuring voltage:")
    POINTING_START = re.compile("WARNING - Start pointing home.")
    POINTING_END = re.compile("Homing successful")
    OUT_OF_RANGE = re.compile("WARNING - Object")
    if start_at_timestamp:
        START_AT_TIME = re.compile(start_at_timestamp)

    with open(log, "r") as logfile:
        lines = logfile.readlines()

    size = len(data["jd"])

    is_valid_array = np.zeros(size)
    in_range_array = np.zeros(size)

    is_valid = True
    # assume it starts in range if start_at_timestamp not specified
    is_in_range = not start_at_timestamp
    data_i = 0
    for line in lines:
        started = None
        if start_at_timestamp:
            started = re.search(START_AT_TIME, line)
        datamatch = re.search(DATAPOINT_REGEX, line)
        start_pointing = re.search(POINTING_START, line)
        end_pointing = re.search(POINTING_END, line)
        out_of_range = re.search(OUT_OF_RANGE, line)

        if started:
            is_in_range = True

        if start_pointing:
            is_valid = False
        elif end_pointing:
            is_valid = True
        elif out_of_range:
            is_valid = False
            is_in_range = False

        if datamatch:
            try:
                is_valid_array[data_i] = is_valid
                in_range_array[data_i] = is_in_range
            except:
                print "Warning: Log datapoint count doesn't match dataset size"
                break
            data_i += 1

    assert len(data["jd"]) == data_i

    new_array_dict = dict((key, data[key][in_range_array == True]) for key in data.keys())
    new_array_dict["valid"] = is_valid_array[in_range_array == True]

    i = 0
    last_one_valid = True
    while i < len(new_array_dict["valid"]):
        if last_one_valid == False:
            if new_array_dict["valid"][i] == True:
                new_array_dict["valid"][i:i+16] = np.zeros(16)
                last_one_valid = True
                i += 16
            else:
                i += 1
        elif last_one_valid == True:
            last_one_valid = new_array_dict["valid"][i] == True
            i += 1

    return new_array_dict
